{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-costume-platform\\\\src\\\\components\\\\InsertCostume\\\\InsertCostume.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { PostData } from '../../services/PostData';\nimport { Redirect } from 'react-router-dom';\nimport Select from 'react-select';\nimport \"./InsertCostume.css\";\nimport \"../BoundedInput/BoundedInput.css\";\nconst sex_data = [{\n  label: 'Γυναίκα',\n  value: 'female_adult'\n}, {\n  label: 'Adras',\n  value: 'male_adult'\n}, {\n  label: 'Koritsi',\n  value: 'female_young'\n}, {\n  label: 'Agori',\n  value: 'male_young'\n}, {\n  label: 'Brefos',\n  value: 'Toodler'\n}];\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, suggestion.name);\n}\n\nclass BoundedInput extends Component {\n  constructor(props) {\n    super(props); // Set initial state\n\n    this.handleTyping = e => {\n      this.setState({\n        value: e.target.value\n      }, () => {\n        this.updateState();\n      });\n    };\n\n    this.state = {\n      count: null,\n      progress: 38,\n      status: 'safe',\n      value: this.props.value ? this.props.value : '',\n      valid: false\n    }; // Set variables\n\n    this.min = this.props.min ? parseInt(this.props.min, 10) : 0;\n    this.max = this.props.max ? parseInt(this.props.max, 10) : 'infinite';\n    this.recommendedMin = this.props.recommendedMin ? parseInt(this.props.recommendedMin, 10) : 0;\n    this.recommendedMax = this.props.recommendedMax ? parseInt(this.props.recommendedMax, 10) : 'infinite'; // Set limit type\n\n    if (this.checkForPixels([this.props.min, this.props.max, this.props.recommendedMin, this.props.recommendedMax])) this.type = 'pixel';\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  checkForPixels(limits) {\n    var isPixelType = false;\n    limits.forEach(function (e) {\n      if (e !== undefined && e.includes('px')) isPixelType = true;\n    });\n    console.log(isPixelType);\n    return isPixelType;\n  } // Save current input value and set displayed count text\n\n\n  updateState() {\n    const val = this.state.value;\n\n    if (this.type !== 'pixel') {\n      this.current = val.length;\n      this.setState({\n        count: this.current > 0 ? Math.round(this.current) : null\n      });\n      this.results();\n    } else {\n      this.setState({\n        value: val\n      }, () => {\n        this.current = this.clone.offsetWidth;\n        this.setState({\n          count: this.current > 0 ? Math.round(this.current) + 'px' : null\n        });\n        this.results();\n      });\n    }\n  }\n\n  results() {\n    // Set current percentage of overall limit\n    if (this.props.max === undefined && this.props.recommendedMax === undefined) {\n      var percentage = this.props.recommendedMin !== undefined ? this.current / this.recommendedMin : this.current / this.min;\n    } else {\n      percentage = this.max !== 'infinite' ? this.current / this.max : this.current / this.recommendedMax;\n    } // Update progress circle graphic\n\n\n    this.setState({\n      progress: Math.max(0, 38 - 38 * percentage)\n    }); // Empty\n\n    if (percentage === 0) {\n      this.setState({\n        status: 'empty'\n      });\n\n      if (this.props.required) {\n        this.setState({\n          valid: false\n        });\n      } else {\n        this.setState({\n          valid: true\n        });\n      } // Error\n\n    } else if (this.current < this.min || this.current > this.max) {\n      this.setState({\n        status: 'error',\n        valid: false\n      }); // Warn\n    } else if (this.current < this.recommendedMin || this.current > this.recommendedMax) {\n      this.setState({\n        status: 'warn',\n        valid: false\n      }); // Safe\n    } else {\n      this.setState({\n        status: 'safe',\n        valid: true\n      });\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          count = _this$state.count,\n          progress = _this$state.progress,\n          status = _this$state.status,\n          value = _this$state.value;\n    const _this$props = this.props,\n          type = _this$props.type,\n          rows = _this$props.rows,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontWeight = _this$props.fontWeight;\n    const cloneStyles = {\n      position: 'absolute',\n      whiteSpace: 'nowrap',\n      fontFamily: fontFamily !== undefined ? fontFamily : 'arial, sans-serif',\n      fontSize: fontSize !== undefined ? parseInt(fontSize) : 16,\n      fontWeight: fontWeight !== undefined ? fontWeight : 400,\n      visibility: 'hidden'\n    };\n    return React.createElement(\"div\", {\n      className: \"bounded-input bounded-input--\" + status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, type === 'textarea' ? React.createElement(\"textarea\", {\n      rows: rows,\n      onChange: this.handleTyping,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }) : React.createElement(\"input\", {\n      type: type,\n      onChange: this.handleTyping,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bounded-input__limit-indicator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bounded-input__character-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, count), React.createElement(\"svg\", {\n      className: \"bounded-input__radial-counter\",\n      height: \"10\",\n      width: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"bounded-input__progress-underlay\",\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"6\",\n      fill: \"none\",\n      strokeWidth: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"bounded-input__progress\",\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"6\",\n      fill: \"none\",\n      strokeWidth: \"2\",\n      style: {\n        strokeDashoffset: progress,\n        strokeDasharray: 38\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }))), this.type === 'pixel' ? React.createElement(\"span\", {\n      ref: el => this.clone = el,\n      style: cloneStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, value) : '');\n  }\n\n}\n\nclass InsertCostume extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelect = selectedSexOption => {\n      this.setState({\n        selectedSexOption\n      });\n      console.log(\"Option selected:\", selectedSexOption);\n    };\n\n    this.handleInputChange = newValue => {\n      this.setState({\n        newValue\n      });\n      console.log(\"Option selected:\", newValue);\n    };\n\n    this.handleUseSelect = selectedUseOption => {\n      this.setState({\n        selectedUseOption\n      });\n      console.log(\"Option selected:\", selectedUseOption);\n    };\n\n    this.onChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.onChangeValue = (e, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      name: '',\n      descr: '',\n      //Sex data on insert\n      s_value: '',\n      //Uses' data\n      u_data: [],\n      usesData: '',\n      //for Use suggestion on insert\n      u_value: '',\n      newValue: '',\n      //Select\n      selectedSexOption: null,\n      selectedUseOption: null,\n      redirectToReferrer: false\n    };\n    this.insert = this.insert.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n  /*For mutli-selection of sex categories*/\n\n\n  getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp('^' + escapedValue, 'i');\n    return this.state.u_data.filter(usesData => regex.test(usesData.name));\n  }\n\n  /* Get uses' data */\n  get_uses() {\n    PostData('get_uses', this.state).then(result => {\n      let responseJson = result;\n\n      if (responseJson.usesData) {\n        sessionStorage.setItem(\"usesData\", JSON.stringify(responseJson));\n        this.setState({\n          u_data: responseJson.usesData\n        });\n        console.log(this.state);\n      } else {\n        alert(result.error);\n      }\n    });\n  }\n  /*Insert of costume*/\n\n\n  insert() {\n    if (this.state.name && this.state.descr && this.state.selectedSexOption && this.state.selectedUseOption) {\n      this.state.u_value = this.state.selectedUseOption.value;\n\n      for (var key in this.state.selectedSexOption) {\n        this.state.s_value = this.state.selectedSexOption[key].value;\n        PostData('insertCostume', this.state).then(result => {\n          let responseJson = result;\n\n          if (responseJson.costumeData) {\n            sessionStorage.setItem('costumeData', JSON.stringify(responseJson));\n            this.setState({\n              redirectToReferrer: true\n            });\n          } else alert(result.error);\n        });\n      }\n    }\n  }\n\n  render() {\n    if (this.state.redirectToReferrer) {\n      return sessionStorage.setItem('costumeData', ''), sessionStorage.clear(), React.createElement(Redirect, {\n        to: '/success',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      });\n    } else if (sessionStorage.getItem('costumeData')) {\n      sessionStorage.setItem('costumeData', '');\n      sessionStorage.clear();\n    }\n\n    this.get_uses(); //For selection of Sex: \n\n    const selectedSexOption = this.state.selectedSexOption; //For selection of Use:\n\n    const selectedUseOption = this.state.selectedUseOption;\n    const u_options = [];\n\n    for (var key in this.state.u_data) {\n      u_options.push({\n        label: this.state.u_data[key].name,\n        value: this.state.u_data[key].name\n      });\n    }\n\n    console.log(this.state);\n    console.log(u_options, sex_data);\n    return React.createElement(\"div\", {\n      className: \"row \",\n      id: \"Body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, \"Insert Costume Data\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, \"Name:\", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Name\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, \"Description:\"), React.createElement(BoundedInput, {\n      type: \"text\",\n      max: \"600px\",\n      recommendedMax: \"500px\",\n      fontFamily: \"Roboto\",\n      fontSize: \"18\",\n      fontWeight: \"400\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"Use:\", React.createElement(Select, {\n      className: \"select-box\",\n      value: selectedUseOption,\n      options: u_options,\n      maxMenuHeight: 170,\n      closeMenuOnSelect: true,\n      onChange: this.handleUseSelect,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Sex:\", React.createElement(Select, {\n      className: \"select-box\",\n      value: selectedSexOption,\n      isMulti: true,\n      maxMenuHeight: 150,\n      closeMenuOnSelect: true,\n      onChange: this.handleSelect,\n      options: sex_data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button\",\n      value: \"Save\",\n      onClick: this.insert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default InsertCostume;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react-costume-platform\\src\\components\\InsertCostume\\InsertCostume.js"],"names":["React","Component","Autosuggest","PostData","Redirect","Select","sex_data","label","value","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","BoundedInput","constructor","props","handleTyping","e","setState","target","updateState","state","count","progress","status","valid","min","parseInt","max","recommendedMin","recommendedMax","checkForPixels","type","componentDidMount","limits","isPixelType","forEach","undefined","includes","console","log","val","current","length","Math","round","results","clone","offsetWidth","percentage","required","render","rows","fontFamily","fontSize","fontWeight","cloneStyles","position","whiteSpace","visibility","strokeDashoffset","strokeDasharray","el","InsertCostume","handleSelect","selectedSexOption","handleInputChange","newValue","handleUseSelect","selectedUseOption","onChange","evt","onChangeValue","method","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","descr","s_value","u_data","usesData","u_value","redirectToReferrer","insert","bind","escapedValue","trim","regex","RegExp","filter","test","get_uses","then","result","responseJson","sessionStorage","setItem","JSON","stringify","alert","error","key","costumeData","clear","getItem","u_options","push"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport {PostData} from '../../services/PostData';\r\nimport {Redirect} from 'react-router-dom'; \r\nimport Select from 'react-select';\r\nimport \"./InsertCostume.css\";\r\nimport \"../BoundedInput/BoundedInput.css\"\r\n\r\nconst sex_data = [{\r\n    label: 'Γυναίκα',\r\n    value: 'female_adult'\r\n  },\r\n  {\r\n    label: 'Adras',\r\n    value: 'male_adult'\r\n    },\r\n    {\r\n      label: 'Koritsi',\r\n      value: 'female_young'\r\n    },\r\n    {\r\n      label: 'Agori',\r\n      value: 'male_young'\r\n    },\r\n    {\r\n      label: 'Brefos',\r\n      value: 'Toodler'\r\n}];\r\n\r\nfunction escapeRegexCharacters(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.name;\r\n}\r\n  \r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n      <span>{suggestion.name}</span>\r\n    );\r\n}\r\n\r\nclass BoundedInput extends Component{\r\n \r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      // Set initial state\r\n      this.state = {\r\n        count: null,\r\n        progress: 38,\r\n        status: 'safe',\r\n        value: this.props.value ? this.props.value : '',\r\n        valid: false\r\n      }\r\n  \r\n      // Set variables\r\n      this.min = this.props.min ? parseInt(this.props.min, 10) : 0;\r\n      this.max = this.props.max ? parseInt(this.props.max, 10) : 'infinite';\r\n      this.recommendedMin = this.props.recommendedMin ? parseInt(this.props.recommendedMin, 10) : 0;\r\n      this.recommendedMax = this.props.recommendedMax ? parseInt(this.props.recommendedMax, 10) : 'infinite';\r\n  \r\n      // Set limit type\r\n      if (this.checkForPixels([this.props.min, this.props.max, this.props.recommendedMin, this.props.recommendedMax]))\r\n        this.type = 'pixel';\r\n  \r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.updateState();\r\n    }\r\n  \r\n    handleTyping = (e) => {\r\n      this.setState({value: e.target.value},() => {\r\n        this.updateState();\r\n      });\r\n    }\r\n  \r\n    checkForPixels(limits) {\r\n      var isPixelType = false;\r\n      limits.forEach(function(e){\r\n        if (e !== undefined && e.includes('px'))\r\n          isPixelType = true;\r\n      });\r\n      console.log(isPixelType);\r\n      return isPixelType;\r\n    }\r\n  \r\n    // Save current input value and set displayed count text\r\n    updateState() {\r\n      const val = this.state.value;\r\n      if (this.type !== 'pixel') {\r\n        this.current = val.length;\r\n        this.setState({count: this.current > 0 ? Math.round(this.current) : null});\r\n        this.results();\r\n      } else {\r\n        this.setState({value: val},() => {\r\n          this.current = this.clone.offsetWidth;\r\n          this.setState({count: this.current > 0 ? Math.round(this.current) + 'px' : null});\r\n          this.results();\r\n        });\r\n      }\r\n    }\r\n  \r\n    results() {\r\n      // Set current percentage of overall limit\r\n      if (this.props.max === undefined && this.props.recommendedMax === undefined) {\r\n        var percentage = this.props.recommendedMin !== undefined ? this.current / this.recommendedMin : this.current / this.min;\r\n      } else {\r\n        percentage = this.max !== 'infinite' ? this.current / this.max : this.current / this.recommendedMax;\r\n      }\r\n  \r\n      // Update progress circle graphic\r\n      this.setState({progress: Math.max(0, 38 - (38 * percentage))});\r\n  \r\n      // Empty\r\n      if (percentage === 0) {\r\n        this.setState({status: 'empty'});\r\n        if (this.props.required) {\r\n          this.setState({valid: false});\r\n        } else {\r\n          this.setState({valid: true});\r\n        }\r\n  \r\n      // Error\r\n      } else if (this.current < this.min || this.current > this.max) {\r\n        this.setState({\r\n          status: 'error',\r\n          valid: false\r\n        });\r\n  \r\n      // Warn\r\n      } else if (this.current < this.recommendedMin || this.current > this.recommendedMax) {\r\n        this.setState({\r\n          status: 'warn',\r\n          valid: false\r\n        });\r\n  \r\n      // Safe\r\n      } else {\r\n        this.setState({\r\n          status: 'safe',\r\n          valid: true\r\n        });\r\n      }\r\n    }\r\n  \r\n    render() {\r\n  \r\n      const { count, progress, status, value } = this.state;\r\n  \r\n      const { type, rows, fontFamily, fontSize, fontWeight } = this.props;\r\n  \r\n      const cloneStyles = {\r\n        position: 'absolute',\r\n        whiteSpace: 'nowrap',\r\n        fontFamily: fontFamily !== undefined ? fontFamily : 'arial, sans-serif',\r\n        fontSize: fontSize !== undefined ? parseInt(fontSize) : 16,\r\n        fontWeight: fontWeight !== undefined ? fontWeight : 400,\r\n        visibility: 'hidden'\r\n      }\r\n  \r\n      return (\r\n        <div className={\"bounded-input bounded-input--\" + status}>\r\n          {type === 'textarea' ? (\r\n            <textarea rows={rows} onChange={this.handleTyping} value={value} />\r\n          ) : (\r\n            <input type={type} onChange={this.handleTyping} value={value} />\r\n          )}\r\n          <div className=\"bounded-input__limit-indicator\">\r\n                <span className=\"bounded-input__character-count\">{count}</span>\r\n                <svg className=\"bounded-input__radial-counter\" height=\"10\" width=\"10\">\r\n                    <circle className=\"bounded-input__progress-underlay\" cx=\"50%\" cy=\"50%\" r=\"6\" fill=\"none\" strokeWidth=\"2\"></circle>\r\n                    <circle className=\"bounded-input__progress\" cx=\"50%\" cy=\"50%\" r=\"6\" fill=\"none\" strokeWidth=\"2\" style={{strokeDashoffset: progress, strokeDasharray: 38}}></circle>\r\n                </svg>\r\n            </div>\r\n          {this.type === 'pixel' ? (\r\n            <span ref={(el) => this.clone = el} style={cloneStyles}>{value}</span>\r\n            ) : ''\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\nclass InsertCostume extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            descr: '',\r\n            //Sex data on insert\r\n            s_value: '',\r\n            //Uses' data\r\n            u_data:[],\r\n            usesData: '',\r\n            //for Use suggestion on insert\r\n            u_value: '', \r\n            newValue: '',\r\n            //Select\r\n            selectedSexOption: null,\r\n            selectedUseOption: null,\r\n\r\n            redirectToReferrer: false,\r\n        };\r\n        this.insert = this.insert.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onChangeValue = this.onChangeValue.bind(this);\r\n    }\r\n\r\n    /*For mutli-selection of sex categories*/\r\n    handleSelect = (selectedSexOption) => {\r\n        this.setState({ selectedSexOption });\r\n        console.log(`Option selected:`, selectedSexOption);\r\n    }\r\n\r\n    handleInputChange = (newValue) => {\r\n        this.setState({newValue});\r\n        console.log(`Option selected:`, newValue);\r\n\r\n    };\r\n\r\n    /*For selection of use categories*/\r\n    handleUseSelect = (selectedUseOption) => {\r\n        this.setState({selectedUseOption});\r\n        console.log(`Option selected:`, selectedUseOption);\r\n    }\r\n\r\n    /*Change functions for text fields*/\r\n    onChange = ( evt ) => { this.setState({ [evt.target.name]: evt.target.value }); };\r\n\r\n    /*Change functions for auto-suggest field*/\r\n    onChangeValue = ( e, {newValue, method}) => {\r\n        this.setState({\r\n            value: newValue\r\n        })\r\n    };\r\n\r\n    /*Functions for use suggestions*/\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          suggestions: this.getSuggestions(value)\r\n        });\r\n    };\r\n    \r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          suggestions: []\r\n        });\r\n    };\r\n\r\n    getSuggestions(value) {\r\n        const escapedValue = escapeRegexCharacters(value.trim());   \r\n        if (escapedValue === '') {\r\n          return [];\r\n        }\r\n        const regex = new RegExp('^' + escapedValue, 'i');\r\n      \r\n        return this.state.u_data.filter(usesData => regex.test(usesData.name));\r\n    };\r\n\r\n    /* Get uses' data */ \r\n\r\n    get_uses(){\r\n        PostData('get_uses', this.state).then((result) => {\r\n            let responseJson = result;\r\n            if(responseJson.usesData){\r\n                sessionStorage.setItem(\"usesData\",JSON.stringify(responseJson));\r\n                this.setState({u_data: responseJson.usesData});\r\n                console.log(this.state);\r\n            }\r\n            else{\r\n                alert(result.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /*Insert of costume*/\r\n\r\n    insert() {\r\n        if(this.state.name && this.state.descr && this.state.selectedSexOption && this.state.selectedUseOption){\r\n            this.state.u_value = this.state.selectedUseOption.value;\r\n            for(var key in this.state.selectedSexOption){\r\n                    this.state.s_value = this.state.selectedSexOption[key].value;\r\n                    PostData('insertCostume',this.state).then((result) => {\r\n                    let responseJson = result;\r\n                    if(responseJson.costumeData){\r\n                        sessionStorage.setItem('costumeData',JSON.stringify(responseJson));\r\n                        this.setState({redirectToReferrer: true});\r\n                    }\r\n                    else\r\n                        alert(result.error);\r\n                    });\r\n           }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectToReferrer) {\r\n            return (\r\n                sessionStorage.setItem('costumeData',''),\r\n                sessionStorage.clear(),\r\n                <Redirect to={'/success'}/>)\r\n        }\r\n        else if (sessionStorage.getItem('costumeData')){\r\n            sessionStorage.setItem('costumeData','');\r\n            sessionStorage.clear();\r\n        }\r\n\r\n        this.get_uses();\r\n        //For selection of Sex: \r\n        const {selectedSexOption} = this.state;\r\n    \r\n        //For selection of Use:\r\n        const {selectedUseOption} = this.state;\r\n        const u_options = [];\r\n        for (var key in this.state.u_data){\r\n            u_options.push( {label: this.state.u_data[key].name, value: this.state.u_data[key].name});\r\n        }\r\n        console.log(this.state);\r\n        console.log(u_options, sex_data);\r\n        \r\n        return (\r\n            <div className=\"row \" id=\"Body\">\r\n                <h4>Insert Costume Data</h4>\r\n                <form>\r\n                    <label>\r\n                        Name:\r\n                        <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.onChange}/>\r\n                    </label>\r\n                    <label>\r\n                        Description:</label>\r\n                        <BoundedInput type=\"text\" max=\"600px\" recommendedMax=\"500px\" fontFamily=\"Roboto\" fontSize=\"18\" fontWeight=\"400\"/>\r\n                    \r\n                    <label>\r\n                        Use:\r\n                        <Select className = \"select-box\"\r\n                            value = {selectedUseOption}\r\n                            options = {u_options}\r\n                            maxMenuHeight={170}\r\n                            closeMenuOnSelect={true}\r\n                            onChange = {this.handleUseSelect}\r\n                            />\r\n                    </label>\r\n                    <label>\r\n                        Sex:\r\n                        <Select className = \"select-box\"\r\n                            value = {selectedSexOption} \r\n                            isMulti\r\n                            maxMenuHeight={150}\r\n                            closeMenuOnSelect={true}\r\n                            onChange = {this.handleSelect}\r\n                            options = {sex_data}\r\n                        />\r\n                    </label>\r\n                    <input type=\"submit\" className=\"button\" value=\"Save\" onClick={this.insert}/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default InsertCostume;\r\n\r\n"]},"metadata":{},"sourceType":"module"}