{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-costume-platform\\\\src\\\\components\\\\Autocomplete\\\\Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport { InsertData } from '../../services/InsertData';\nimport { resolve } from \"path\";\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('^' + escapedValue, 'i');\n  return languages.filter(language => regex.test(language.name));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, suggestion.name);\n}\n\nexport default class Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      costumeData: '',\n      value: '',\n      suggestions: []\n    };\n    this.get_costumes = this.get_costumes.bind(this);\n  }\n\n  get_costumes() {\n    InsertData('costumes', this.state).then(result => {\n      let responseJson = result;\n\n      if (responseJson.costumeData) {\n        sessionStorage.setItem(\"costumeData\", JSON.stringify(responseJson));\n        this.setState({\n          data: responseJson.costumeData\n        });\n        console.log(this.state);\n      } else {\n        alert(result.error);\n      }\n    });\n  }\n\n  render() {\n    this.get_costumes();\n    console.log(this.state);\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Bla\");\n  }\n\n}","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react-costume-platform\\src\\components\\Autocomplete\\Autocomplete.js"],"names":["React","Component","InsertData","resolve","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","languages","filter","language","test","name","getSuggestionValue","suggestion","renderSuggestion","Autocomplete","constructor","props","state","data","costumeData","suggestions","get_costumes","bind","then","result","responseJson","sessionStorage","setItem","JSON","stringify","setState","console","log","alert","error","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,OAAT,QAAwB,MAAxB;;AAEA,SAASC,qBAAT,CAA+BC,GAA/B,EAAoC;AAChC,SAAOA,GAAG,CAACC,OAAJ,CAAY,qBAAZ,EAAmC,MAAnC,CAAP;AACH;;AAEC,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,QAAMC,YAAY,GAAGL,qBAAqB,CAACI,KAAK,CAACE,IAAN,EAAD,CAA1C;;AAEA,MAAID,YAAY,KAAK,EAArB,EAAyB;AACvB,WAAO,EAAP;AACD;;AAED,QAAME,KAAK,GAAG,IAAIC,MAAJ,CAAW,MAAMH,YAAjB,EAA+B,GAA/B,CAAd;AAEA,SAAOI,SAAS,CAACC,MAAV,CAAiBC,QAAQ,IAAIJ,KAAK,CAACK,IAAN,CAAWD,QAAQ,CAACE,IAApB,CAA7B,CAAP;AACD;;AAED,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AACtC,SAAOA,UAAU,CAACF,IAAlB;AACD;;AAED,SAASG,gBAAT,CAA0BD,UAA1B,EAAsC;AACpC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,UAAU,CAACF,IAAlB,CADF;AAGD;;AAGH,eAAe,MAAMI,YAAN,SAA2BpB,SAA3B,CAAoC;AAE/CqB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAC,EADI;AAETC,MAAAA,WAAW,EAAE,EAFJ;AAGTlB,MAAAA,KAAK,EAAE,EAHE;AAITmB,MAAAA,WAAW,EAAE;AAJJ,KAAb;AAMA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AAEDD,EAAAA,YAAY,GAAE;AACV1B,IAAAA,UAAU,CAAC,UAAD,EAAa,KAAKsB,KAAlB,CAAV,CAAmCM,IAAnC,CAAyCC,MAAD,IAAY;AAChD,UAAIC,YAAY,GAAGD,MAAnB;;AACA,UAAGC,YAAY,CAACN,WAAhB,EAA4B;AACxBO,QAAAA,cAAc,CAACC,OAAf,CAAuB,aAAvB,EAAqCC,IAAI,CAACC,SAAL,CAAeJ,YAAf,CAArC;AACA,aAAKK,QAAL,CAAc;AAACZ,UAAAA,IAAI,EAAEO,YAAY,CAACN;AAApB,SAAd;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAjB;AACH,OAJD,MAKI;AACAgB,QAAAA,KAAK,CAACT,MAAM,CAACU,KAAR,CAAL;AACH;AACJ,KAVD;AAWH;;AAEDC,EAAAA,MAAM,GAAE;AACJ,SAAKd,YAAL;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,KAAjB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAGH;;AAjC8C","sourcesContent":["import React, { Component } from \"react\";\r\nimport { InsertData } from '../../services/InsertData';\r\nimport { resolve } from \"path\";\r\n\r\nfunction escapeRegexCharacters(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n  \r\n  function getSuggestions(value) {\r\n    const escapedValue = escapeRegexCharacters(value.trim());\r\n    \r\n    if (escapedValue === '') {\r\n      return [];\r\n    }\r\n  \r\n    const regex = new RegExp('^' + escapedValue, 'i');\r\n  \r\n    return languages.filter(language => regex.test(language.name));\r\n  }\r\n  \r\n  function getSuggestionValue(suggestion) {\r\n    return suggestion.name;\r\n  }\r\n  \r\n  function renderSuggestion(suggestion) {\r\n    return (\r\n      <span>{suggestion.name}</span>\r\n    );\r\n  }\r\n\r\n\r\nexport default class Autocomplete extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n            costumeData: '',\r\n            value: '',\r\n            suggestions: []\r\n        };\r\n        this.get_costumes = this.get_costumes.bind(this);\r\n    }\r\n\r\n    get_costumes(){\r\n        InsertData('costumes', this.state).then((result) => {\r\n            let responseJson = result;\r\n            if(responseJson.costumeData){\r\n                sessionStorage.setItem(\"costumeData\",JSON.stringify(responseJson));\r\n                this.setState({data: responseJson.costumeData});\r\n                console.log(this.state);\r\n            }\r\n            else{\r\n                alert(result.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        this.get_costumes();\r\n        console.log(this.state);\r\n        return(\r\n            <h1>Bla</h1>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}