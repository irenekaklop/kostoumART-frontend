{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-costume-platform\\\\src\\\\components\\\\BoundedInput\\\\BoundedInput.js\";\nimport React, { Component } from 'react';\nimport './BoundedInput.css';\n\nclass BoundedInput extends Component {\n  constructor(props) {\n    super(props); // Set initial state\n\n    this.handleTyping = e => {\n      this.setState({\n        value: e.target.value\n      }, () => {\n        this.updateState();\n      });\n    };\n\n    this.state = {\n      count: null,\n      progress: 38,\n      status: 'safe',\n      value: this.props.value ? this.props.value : '',\n      valid: false\n    }; // Set variables\n\n    this.min = this.props.min ? parseInt(this.props.min, 10) : 0;\n    this.max = this.props.max ? parseInt(this.props.max, 10) : 'infinite';\n    this.recommendedMin = this.props.recommendedMin ? parseInt(this.props.recommendedMin, 10) : 0;\n    this.recommendedMax = this.props.recommendedMax ? parseInt(this.props.recommendedMax, 10) : 'infinite'; // Set limit type\n\n    if (this.checkForPixels([this.props.min, this.props.max, this.props.recommendedMin, this.props.recommendedMax])) this.type = 'pixel';\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  checkForPixels(limits) {\n    var isPixelType = false;\n    limits.forEach(function (e) {\n      if (e !== undefined && e.includes('px')) isPixelType = true;\n    });\n    console.log(isPixelType);\n    return isPixelType;\n  } // Save current input value and set displayed count text\n\n\n  updateState() {\n    const val = this.state.value;\n\n    if (this.type !== 'pixel') {\n      this.current = val.length;\n      this.setState({\n        count: this.current > 0 ? Math.round(this.current) : null\n      });\n      this.results();\n    } else {\n      this.setState({\n        value: val\n      }, () => {\n        this.current = this.clone.offsetWidth;\n        this.setState({\n          count: this.current > 0 ? Math.round(this.current) + 'px' : null\n        });\n        this.results();\n      });\n    }\n  }\n\n  results() {\n    // Set current percentage of overall limit\n    if (this.props.max === undefined && this.props.recommendedMax === undefined) {\n      var percentage = this.props.recommendedMin !== undefined ? this.current / this.recommendedMin : this.current / this.min;\n    } else {\n      percentage = this.max !== 'infinite' ? this.current / this.max : this.current / this.recommendedMax;\n    } // Update progress circle graphic\n\n\n    this.setState({\n      progress: Math.max(0, 38 - 38 * percentage)\n    }); // Empty\n\n    if (percentage === 0) {\n      this.setState({\n        status: 'empty'\n      });\n\n      if (this.props.required) {\n        this.setState({\n          valid: false\n        });\n      } else {\n        this.setState({\n          valid: true\n        });\n      } // Error\n\n    } else if (this.current < this.min || this.current > this.max) {\n      this.setState({\n        status: 'error',\n        valid: false\n      }); // Warn\n    } else if (this.current < this.recommendedMin || this.current > this.recommendedMax) {\n      this.setState({\n        status: 'warn',\n        valid: false\n      }); // Safe\n    } else {\n      this.setState({\n        status: 'safe',\n        valid: true\n      });\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          count = _this$state.count,\n          progress = _this$state.progress,\n          status = _this$state.status,\n          value = _this$state.value;\n    const _this$props = this.props,\n          type = _this$props.type,\n          rows = _this$props.rows,\n          fontFamily = _this$props.fontFamily,\n          fontSize = _this$props.fontSize,\n          fontWeight = _this$props.fontWeight;\n    const cloneStyles = {\n      position: 'absolute',\n      whiteSpace: 'nowrap',\n      fontFamily: fontFamily !== undefined ? fontFamily : 'arial, sans-serif',\n      fontSize: fontSize !== undefined ? parseInt(fontSize) : 16,\n      fontWeight: fontWeight !== undefined ? fontWeight : 400,\n      visibility: 'hidden'\n    };\n    return React.createElement(\"div\", {\n      className: \"bounded-input bounded-input--\" + status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, type === 'textarea' ? React.createElement(\"textarea\", {\n      rows: rows,\n      onChange: this.handleTyping,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }) : React.createElement(\"input\", {\n      type: type,\n      onChange: this.handleTyping,\n      value: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bounded-input__limit-indicator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"bounded-input__character-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, count), React.createElement(\"svg\", {\n      className: \"bounded-input__radial-counter\",\n      height: \"10\",\n      width: \"10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"circle\", {\n      className: \"bounded-input__progress-underlay\",\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"6\",\n      fill: \"none\",\n      strokeWidth: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"circle\", {\n      className: \"bounded-input__progress\",\n      cx: \"50%\",\n      cy: \"50%\",\n      r: \"6\",\n      fill: \"none\",\n      strokeWidth: \"2\",\n      style: {\n        strokeDashoffset: progress,\n        strokeDasharray: 38\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }))), this.type === 'pixel' ? React.createElement(\"span\", {\n      ref: el => this.clone = el,\n      style: cloneStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, value) : '');\n  }\n\n}\n\nexport default BoundedInput;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react-costume-platform\\src\\components\\BoundedInput\\BoundedInput.js"],"names":["React","Component","BoundedInput","constructor","props","handleTyping","e","setState","value","target","updateState","state","count","progress","status","valid","min","parseInt","max","recommendedMin","recommendedMax","checkForPixels","type","componentDidMount","limits","isPixelType","forEach","undefined","includes","console","log","val","current","length","Math","round","results","clone","offsetWidth","percentage","required","render","rows","fontFamily","fontSize","fontWeight","cloneStyles","position","whiteSpace","visibility","strokeDashoffset","strokeDasharray","el"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './BoundedInput.css';\r\n\r\nclass BoundedInput extends Component{\r\n \r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      // Set initial state\r\n      this.state = {\r\n        count: null,\r\n        progress: 38,\r\n        status: 'safe',\r\n        value: this.props.value ? this.props.value : '',\r\n        valid: false\r\n      }\r\n  \r\n      // Set variables\r\n      this.min = this.props.min ? parseInt(this.props.min, 10) : 0;\r\n      this.max = this.props.max ? parseInt(this.props.max, 10) : 'infinite';\r\n      this.recommendedMin = this.props.recommendedMin ? parseInt(this.props.recommendedMin, 10) : 0;\r\n      this.recommendedMax = this.props.recommendedMax ? parseInt(this.props.recommendedMax, 10) : 'infinite';\r\n  \r\n      // Set limit type\r\n      if (this.checkForPixels([this.props.min, this.props.max, this.props.recommendedMin, this.props.recommendedMax]))\r\n        this.type = 'pixel';\r\n  \r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.updateState();\r\n    }\r\n  \r\n    handleTyping = (e) => {\r\n      this.setState({value: e.target.value},() => {\r\n        this.updateState();\r\n      });\r\n    }\r\n  \r\n    checkForPixels(limits) {\r\n      var isPixelType = false;\r\n      limits.forEach(function(e){\r\n        if (e !== undefined && e.includes('px'))\r\n          isPixelType = true;\r\n      });\r\n      console.log(isPixelType);\r\n      return isPixelType;\r\n    }\r\n  \r\n    // Save current input value and set displayed count text\r\n    updateState() {\r\n      const val = this.state.value;\r\n      if (this.type !== 'pixel') {\r\n        this.current = val.length;\r\n        this.setState({count: this.current > 0 ? Math.round(this.current) : null});\r\n        this.results();\r\n      } else {\r\n        this.setState({value: val},() => {\r\n          this.current = this.clone.offsetWidth;\r\n          this.setState({count: this.current > 0 ? Math.round(this.current) + 'px' : null});\r\n          this.results();\r\n        });\r\n      }\r\n    }\r\n  \r\n    results() {\r\n      // Set current percentage of overall limit\r\n      if (this.props.max === undefined && this.props.recommendedMax === undefined) {\r\n        var percentage = this.props.recommendedMin !== undefined ? this.current / this.recommendedMin : this.current / this.min;\r\n      } else {\r\n        percentage = this.max !== 'infinite' ? this.current / this.max : this.current / this.recommendedMax;\r\n      }\r\n  \r\n      // Update progress circle graphic\r\n      this.setState({progress: Math.max(0, 38 - (38 * percentage))});\r\n  \r\n      // Empty\r\n      if (percentage === 0) {\r\n        this.setState({status: 'empty'});\r\n        if (this.props.required) {\r\n          this.setState({valid: false});\r\n        } else {\r\n          this.setState({valid: true});\r\n        }\r\n  \r\n      // Error\r\n      } else if (this.current < this.min || this.current > this.max) {\r\n        this.setState({\r\n          status: 'error',\r\n          valid: false\r\n        });\r\n  \r\n      // Warn\r\n      } else if (this.current < this.recommendedMin || this.current > this.recommendedMax) {\r\n        this.setState({\r\n          status: 'warn',\r\n          valid: false\r\n        });\r\n  \r\n      // Safe\r\n      } else {\r\n        this.setState({\r\n          status: 'safe',\r\n          valid: true\r\n        });\r\n      }\r\n    }\r\n  \r\n    render() {\r\n  \r\n      const { count, progress, status, value } = this.state;\r\n  \r\n      const { type, rows, fontFamily, fontSize, fontWeight } = this.props;\r\n  \r\n      const cloneStyles = {\r\n        position: 'absolute',\r\n        whiteSpace: 'nowrap',\r\n        fontFamily: fontFamily !== undefined ? fontFamily : 'arial, sans-serif',\r\n        fontSize: fontSize !== undefined ? parseInt(fontSize) : 16,\r\n        fontWeight: fontWeight !== undefined ? fontWeight : 400,\r\n        visibility: 'hidden'\r\n      }\r\n  \r\n      return (\r\n        <div className={\"bounded-input bounded-input--\" + status}>\r\n          {type === 'textarea' ? (\r\n            <textarea rows={rows} onChange={this.handleTyping} value={value} />\r\n          ) : (\r\n            <input type={type} onChange={this.handleTyping} value={value} />\r\n          )}\r\n          <div className=\"bounded-input__limit-indicator\">\r\n                <span className=\"bounded-input__character-count\">{count}</span>\r\n                <svg className=\"bounded-input__radial-counter\" height=\"10\" width=\"10\">\r\n                    <circle className=\"bounded-input__progress-underlay\" cx=\"50%\" cy=\"50%\" r=\"6\" fill=\"none\" strokeWidth=\"2\"></circle>\r\n                    <circle className=\"bounded-input__progress\" cx=\"50%\" cy=\"50%\" r=\"6\" fill=\"none\" strokeWidth=\"2\" style={{strokeDashoffset: progress, strokeDasharray: 38}}></circle>\r\n                </svg>\r\n            </div>\r\n          {this.type === 'pixel' ? (\r\n            <span ref={(el) => this.clone = el} style={cloneStyles}>{value}</span>\r\n            ) : ''\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n\r\n  export default BoundedInput;"]},"metadata":{},"sourceType":"module"}