{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-costume-platform\\\\src\\\\components\\\\Autocomplete\\\\Autocomplete.js\";\nimport React, { Component } from \"react\";\nimport Autosuggest from 'react-autosuggest';\nimport \"./Autocomplete.css\";\nimport { PostData } from '../../services/PostData';\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, suggestion.name);\n}\n\nexport default class Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      data: [],\n      costumeData: '',\n      value: '',\n      suggestions: []\n    };\n    this.get_costumes = this.get_costumes.bind(this);\n  }\n\n  getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp('^' + escapedValue, 'i');\n    return this.state.data.filter(costumeData => regex.test(costumeData.name));\n  }\n\n  get_costumes() {\n    PostData('costumes', this.state).then(result => {\n      let responseJson = result;\n\n      if (responseJson.costumeData) {\n        sessionStorage.setItem(\"costumeData\", JSON.stringify(responseJson));\n        this.setState({\n          data: responseJson.costumeData\n        });\n        console.log(this.state);\n      } else {\n        alert(result.error);\n      }\n    });\n  }\n\n  render() {\n    this.get_costumes();\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n    const inputProps = {\n      placeholder: \"Type something\",\n      value,\n      onChange: this.onChange\n    };\n    console.log(this.state);\n    return React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react-costume-platform\\src\\components\\Autocomplete\\Autocomplete.js"],"names":["React","Component","Autosuggest","PostData","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","Autocomplete","constructor","props","onChange","event","newValue","method","setState","value","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","state","data","costumeData","get_costumes","bind","escapedValue","trim","regex","RegExp","filter","test","then","result","responseJson","sessionStorage","setItem","JSON","stringify","console","log","alert","error","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Autosuggest from 'react-autosuggest';\r\nimport \"./Autocomplete.css\"\r\nimport { PostData } from '../../services/PostData';\r\n\r\nfunction escapeRegexCharacters(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n  \r\n  \r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.name;\r\n}\r\n  \r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n      <span>{suggestion.name}</span>\r\n    );\r\n  }\r\n\r\n\r\nexport default class Autocomplete extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            data:[],\r\n            costumeData: '',\r\n            value: '',\r\n            suggestions: []\r\n        };\r\n        this.get_costumes = this.get_costumes.bind(this);\r\n    }\r\n\r\n    onChange = ( event, {newValue, method}) => {\r\n        this.setState({\r\n            value: newValue\r\n        })\r\n    };\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          suggestions: this.getSuggestions(value)\r\n        });\r\n    };\r\n    \r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          suggestions: []\r\n        });\r\n    };\r\n\r\n    getSuggestions(value) {\r\n        const escapedValue = escapeRegexCharacters(value.trim());\r\n        \r\n        if (escapedValue === '') {\r\n          return [];\r\n        }\r\n      \r\n        const regex = new RegExp('^' + escapedValue, 'i');\r\n      \r\n        return this.state.data.filter(costumeData => regex.test(costumeData.name));\r\n    };\r\n\r\n    get_costumes(){\r\n        PostData('costumes', this.state).then((result) => {\r\n            let responseJson = result;\r\n            if(responseJson.costumeData){\r\n                sessionStorage.setItem(\"costumeData\",JSON.stringify(responseJson));\r\n                this.setState({data: responseJson.costumeData});\r\n                console.log(this.state);\r\n            }\r\n            else{\r\n                alert(result.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    render(){\r\n        this.get_costumes();\r\n        const { value, suggestions } = this.state;\r\n        const inputProps = {\r\n            placeholder: \"Type something\",\r\n            value,\r\n            onChange: this.onChange\r\n        };\r\n        console.log(this.state);\r\n        return(\r\n            <Autosuggest \r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                inputProps={inputProps} />\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}