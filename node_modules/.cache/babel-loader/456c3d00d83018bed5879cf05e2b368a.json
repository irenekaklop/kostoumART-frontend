{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-costume-platform\\\\src\\\\components\\\\InsertCostume\\\\InsertCostume.js\";\nimport React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport { PostData } from '../../services/PostData';\nimport { Redirect } from 'react-router-dom';\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.name;\n}\n\nfunction renderSuggestion(suggestion) {\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, suggestion.name);\n}\n\nclass InsertCostume extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = evt => {\n      this.setState({\n        [evt.target.name]: evt.target.value\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      name: '',\n      descr: '',\n      //date: '',\n      //sex: '',\n      //Uses' data\n      u_data: [],\n      usesData: '',\n      //for Use suggestion\n      value: '',\n      //== use\n      suggestions: [],\n      redirectToReferrer: false\n    };\n    this.insert = this.insert.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  getSuggestions(value) {\n    const escapedValue = escapeRegexCharacters(value.trim());\n\n    if (escapedValue === '') {\n      return [];\n    }\n\n    const regex = new RegExp('^' + escapedValue, 'i');\n    return this.state.u_data.filter(usesData => regex.test(usesData.name));\n  }\n\n  /* Get uses' data */\n  get_uses() {\n    PostData('get_uses', this.state).then(result => {\n      let responseJson = result;\n\n      if (responseJson.usesData) {\n        sessionStorage.setItem(\"usesData\", JSON.stringify(responseJson));\n        this.setState({\n          u_data: responseJson.usesData\n        });\n        console.log(this.state);\n      } else {\n        alert(result.error);\n      }\n    });\n  }\n  /*Insert of costume*/\n\n\n  insert() {\n    if (this.state.name && this.state.descr && this.state.value) {\n      PostData('insertCostume', this.state).then(result => {\n        let responseJson = result;\n\n        if (responseJson.costumeData) {\n          sessionStorage.setItem('costumeData', JSON.stringify(responseJson));\n          this.setState({\n            redirectToReferrer: true\n          });\n        } else alert(result.error);\n      });\n    }\n  }\n\n  render() {\n    if (this.state.redirectToReferrer) {\n      return sessionStorage.setItem('costumeData', ''), sessionStorage.clear(), React.createElement(Redirect, {\n        to: '/success',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    } else if (sessionStorage.getItem('costumeData')) {\n      sessionStorage.setItem('costumeData', '');\n      sessionStorage.clear();\n    }\n\n    this.get_uses();\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n    const inputProps = {\n      placeholder: \"Type something\",\n      value,\n      onChange: this.onChange\n    };\n    console.log(this.state);\n    return React.createElement(\"div\", {\n      className: \"row \",\n      id: \"sBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"medium-5 columns left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Insert Costume Data\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Name\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"descr\",\n      placeholder: \"Description\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button\",\n      value: \"Save\",\n      onClick: this.insert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default InsertCostume;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react-costume-platform\\src\\components\\InsertCostume\\InsertCostume.js"],"names":["React","Component","Autosuggest","PostData","Redirect","escapeRegexCharacters","str","replace","getSuggestionValue","suggestion","name","renderSuggestion","InsertCostume","constructor","props","onChange","evt","setState","target","value","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","state","descr","u_data","usesData","redirectToReferrer","insert","bind","escapedValue","trim","regex","RegExp","filter","test","get_uses","then","result","responseJson","sessionStorage","setItem","JSON","stringify","console","log","alert","error","costumeData","render","clear","getItem","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport {PostData} from '../../services/PostData';\r\nimport {Redirect} from 'react-router-dom'; \r\n\r\nfunction escapeRegexCharacters(str) {\r\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.name;\r\n}\r\n  \r\nfunction renderSuggestion(suggestion) {\r\n    return (\r\n      <span>{suggestion.name}</span>\r\n    );\r\n}\r\n\r\nclass InsertCostume extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        name: '',\r\n        descr: '',\r\n        //date: '',\r\n        //sex: '',\r\n        //Uses' data\r\n        u_data:[],\r\n        usesData: '',\r\n        //for Use suggestion\r\n        value: '', //== use\r\n        suggestions: [],\r\n        redirectToReferrer: false\r\n        };\r\n        this.insert = this.insert.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange = ( evt ) => {\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n    };\r\n\r\n    /*Functions for use suggestions*/\r\n\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.setState({\r\n          suggestions: this.getSuggestions(value)\r\n        });\r\n    };\r\n    \r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n          suggestions: []\r\n        });\r\n    };\r\n\r\n    getSuggestions(value) {\r\n        const escapedValue = escapeRegexCharacters(value.trim());   \r\n        if (escapedValue === '') {\r\n          return [];\r\n        }\r\n        const regex = new RegExp('^' + escapedValue, 'i');\r\n      \r\n        return this.state.u_data.filter(usesData => regex.test(usesData.name));\r\n    };\r\n\r\n    /* Get uses' data */ \r\n\r\n    get_uses(){\r\n        PostData('get_uses', this.state).then((result) => {\r\n            let responseJson = result;\r\n            if(responseJson.usesData){\r\n                sessionStorage.setItem(\"usesData\",JSON.stringify(responseJson));\r\n                this.setState({u_data: responseJson.usesData});\r\n                console.log(this.state);\r\n            }\r\n            else{\r\n                alert(result.error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /*Insert of costume*/\r\n\r\n    insert() {\r\n        if(this.state.name && this.state.descr && this.state.value){\r\n            PostData('insertCostume',this.state).then((result) => {\r\n            let responseJson = result;\r\n            if(responseJson.costumeData){\r\n                sessionStorage.setItem('costumeData',JSON.stringify(responseJson));\r\n                this.setState({redirectToReferrer: true});\r\n            }\r\n            else\r\n                alert(result.error);\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirectToReferrer) {\r\n            return (\r\n                sessionStorage.setItem('costumeData',''),\r\n                sessionStorage.clear(),\r\n                <Redirect to={'/success'}/>)\r\n        }\r\n        else if (sessionStorage.getItem('costumeData')){\r\n            sessionStorage.setItem('costumeData','');\r\n            sessionStorage.clear();\r\n        }\r\n\r\n        this.get_uses();\r\n        const { value, suggestions } = this.state;\r\n        const inputProps = {\r\n            placeholder: \"Type something\",\r\n            value,\r\n            onChange: this.onChange\r\n        };\r\n\r\n        console.log(this.state);\r\n        return (\r\n            <div className=\"row \" id=\"sBody\">\r\n                <div className=\"medium-5 columns left\">\r\n                <h4>Insert Costume Data</h4>\r\n                <input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={this.onChange}/>\r\n                <input type=\"text\" name=\"descr\" placeholder=\"Description\" onChange={this.onChange}/>\r\n                <Autosuggest \r\n                suggestions={suggestions}\r\n                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                inputProps={inputProps} />\r\n                <input type=\"submit\" className=\"button\" value=\"Save\" onClick={this.insert}/>\r\n                </div>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default InsertCostume;\r\n\r\n"]},"metadata":{},"sourceType":"module"}